from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from sqlalchemy.future import select

from app.service import fetch, get_profile_url, get_stats_user, get_games_user, get_achievements_game, get_description_game, get_friends_user, get_friends_info
from app.keyboards import main_keyboard, check_keyboard
from app.models import Session, UserMunSteam

router = Router()


#------------------–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥—ã /start----------------------
@router.message(lambda call: call.text=='/start' or call.text=='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def command_start(message: Message) -> None:
    async with Session() as session:
        async with session.begin():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            stmt = select(UserMunSteam).filter_by(telegram_id=str(message.from_user.id))
            result = await session.execute(stmt)
            user = result.scalars().first()

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
            if not user:
                user = UserMunSteam(telegram_id=str(message.from_user.id))
                session.add(user)
                await session.commit()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —Å —Å–∞–π—Ç–∞ munsteam.ru ",
                         reply_markup=main_keyboard())


#------------------–í—ã–±–æ—Ä —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞----------------------
@router.message(F.text == '–ü—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
async def command_start_handler(message: Message) -> None:
    await message.answer(f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç https://munsteam.ru/user/profile/?telegram_id={message.from_user.id}", reply_markup=check_keyboard())


@router.message(F.text == '–ü—Ä–∏–≤—è–∑–∞–ª')
async def command_start_handler(message: Message) -> None:
    await fetch(message)


#------------------–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π----------------------
@router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—åüë§')
async def get_profile_user(message: Message):
    async with Session() as session:
        async with session.begin():
            stmt = select(UserMunSteam).filter_by(telegram_id=str(message.from_user.id))
            result = await session.execute(stmt)
            user = result.scalars().first()
            if user.steam_id is not None:
                await get_profile_url(message, user.steam_id)
            else:
                await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å, {message.from_user.full_name} üë§\n")


@router.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ CS2‚öîÔ∏è')
async def get_profile_user(message: Message):
    async with Session() as session:
        async with session.begin():
            stmt = select(UserMunSteam).filter_by(telegram_id=str(message.from_user.id))
            result = await session.execute(stmt)
            user = result.scalars().first()
            if user.steam_id is not None:
                await get_stats_user(message, user.steam_id)
            else:
                await message.answer(f"–£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç")
                await message.answer(
                    f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç https://munsteam.ru/user/profile/?telegram_id={message.from_user.id}",
                    reply_markup=check_keyboard())


@router.message(F.text == '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—èüìã')
async def get_profile_user(message: Message):
    async with Session() as session:
        async with session.begin():
            stmt = select(UserMunSteam).filter_by(telegram_id=str(message.from_user.id))
            result = await session.execute(stmt)
            user = result.scalars().first()
            if user.steam_id is not None:
                await get_games_user(message, user.steam_id)
            else:
                await message.answer(f"–£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç")
                await message.answer(
                    f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç https://munsteam.ru/user/profile/?telegram_id={message.from_user.id}",
                    reply_markup=check_keyboard())


@router.callback_query(lambda call: call.data[0] == 'g')
async def get_achievements_games(callback: CallbackQuery):
    async with Session() as session:
        async with session.begin():
            stmt = select(UserMunSteam).filter_by(telegram_id=str(callback.from_user.id))
            result = await session.execute(stmt)
            user = result.scalars().first()
            if user.steam_id is not None:
                await get_achievements_game(callback, user.steam_id, callback.data[1:])
            else:
                await callback.message.answer(f"–£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç")
                await callback.message.answer(
                    f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç https://munsteam.ru/user/profile/?telegram_id={callback.from_user.id}",
                    reply_markup=check_keyboard())


@router.callback_query(lambda call: '+' in call.data)
async def get_description_achievement(callback: CallbackQuery):
    async with Session() as session:
        async with session.begin():
            stmt = select(UserMunSteam).filter_by(telegram_id=str(callback.from_user.id))
            result = await session.execute(stmt)
            user = result.scalars().first()
            index_plus = callback.data.index('+')
            if user.steam_id is not None:
                await get_description_game(callback, user.steam_id, callback.data[index_plus + 1:], callback.data[:index_plus])
            else:
                await callback.message.answer(f"–£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç")
                await callback.message.answer(
                    f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç https://munsteam.ru/user/profile/?telegram_id={callback.from_user.id}",
                    reply_markup=check_keyboard())


@router.callback_query(F.data == 'menu')
async def going_to_menu(callback: CallbackQuery):
    await command_start(callback.message)


@router.message(F.text == '–î—Ä—É–∑—å—èü´Ç')
async def get_profile_user(message: Message):
    async with Session() as session:
        async with session.begin():
            stmt = select(UserMunSteam).filter_by(telegram_id=str(message.from_user.id))
            result = await session.execute(stmt)
            user = result.scalars().first()
            if user.steam_id is not None:
                await get_friends_user(message, user.steam_id)
            else:
                await message.answer(f"–£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç")
                await message.answer(
                    f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç https://munsteam.ru/user/profile/?telegram_id={message.from_user.id}",
                    reply_markup=check_keyboard())


@router.callback_query(lambda call: call.data[0:6] == 'friend')
async def get_achievements_games(callback: CallbackQuery):
    async with Session() as session:
        async with session.begin():
            stmt = select(UserMunSteam).filter_by(telegram_id=str(callback.from_user.id))
            result = await session.execute(stmt)
            user = result.scalars().first()
            if user.steam_id is not None:
                await get_friends_info(callback, user.steam_id)
            else:
                await callback.message.answer(f"–£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∞–∫–∫–∞—É–Ω—Ç")
                await callback.message.answer(
                    f"–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç https://munsteam.ru/user/profile/?telegram_id={callback.from_user.id}",
                    reply_markup=check_keyboard())

