import aiohttp
import asyncio
import locale
from datetime import datetime
from sqlalchemy.future import select

from app.keyboards import getout_keyboard, games_keyboard
from app.models import Session, UserMunSteam


async def fetch(message):
    url = 'https://munsteam.ru/user/api/telegram/'
    params = {'format': 'json', 'telegram_id': message.from_user.id}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                if data:
                    data_dict = {k: v for i in data for k,v in i.items()}
                    steam_id = data_dict['steamid_user']
                    if steam_id is not None:
                        await message.answer("–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω", reply_markup=getout_keyboard())
                        await save_steam_id_to_db(message, steam_id)
                    else:
                        await message.answer("–£ –≤–∞—Å –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω —Å—Ç–∏–º –∞–∫–∫–∞—É–Ω—Ç –Ω–∞ —Å–∞–π—Ç–µ!", reply_markup=getout_keyboard())
                else:
                    await message.answer("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω")
            else:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –°—Ç–∞—Ç—É—Å: {response.status}")


async def get_profile_url(message, steam_id):
    url = 'https://www.munsteam.ru/user/api/steam_info/'
    params = {'format': 'json', 'steam_id': steam_id}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                data_dict = {k: v for k, v in data[0].items()}
                if data:
                    date_create_acc = datetime.fromisoformat(data_dict['createdacc_time'])
                    date_lastlogoff = datetime.fromisoformat(data_dict['lastlogoff_time'])
                    message_text = (
                        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å, {message.from_user.full_name} üë§\n"
                        f"*–ò–º—è Steam:* [{data_dict['personaname']}]({data_dict['profileurl']})\n"
                        f"*–°—Ç–∞—Ç—É—Å:* {data_dict['get_personastate_display']} \n"
                        f"*–ü—Ä–æ—Ñ–∏–ª—å:* {data_dict['get_communityvisibilitystate_display']} üë§\n"
                        f"*–ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –≤ —Å–µ—Ç–∏:* {date_lastlogoff.strftime('%d %B %Y %H:%M')} \n"
                        f"*–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:* {date_create_acc.strftime('%d %B %Y %H:%M')} \n"
                    )

                    await message.answer_photo(data_dict['avatarfull'], caption=message_text, parse_mode='MarkdownV2')
                else:
                    await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ :(")
            else:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –°—Ç–∞—Ç—É—Å: {response.status}")


async def save_steam_id_to_db(message, steam_id):
    async with Session() as session:
        async with session.begin():
            stmt = select(UserMunSteam).filter_by(telegram_id=str(message.from_user.id))
            result = await session.execute(stmt)
            user = result.scalars().first()

            if user:
                user.steam_id = steam_id
                session.add(user)
                await session.commit()
            else:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


async def get_stats_user(message, steam_id):
    url = 'https://www.munsteam.ru/statistic/api/user_statistic/'
    params = {'format': 'json', 'user_steam_id': steam_id}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                data_dict = {k: v for k, v in data[0].items()}
                stats_message = (
                    f"*–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–±–∏–π—Å—Ç–≤*: {data_dict['total_kills']}\n"
                    f"*–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ—Ä—Ç–µ–π*: {data_dict['total_deaths']}\n"
                    f"*–í—Ä–µ–º—è –≤ –∏–≥—Ä–µ*: {data_dict['time_played_hours']}\n"
                    f"*–ó–∞–∫–ª–∞–¥–∫–∞ –±–æ–º–±*: {data_dict['total_planted_bombs']}\n"
                    f"*–†–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ–º–±*: {data_dict['total_defused_bombs']}\n"
                    f"*–û–±—â–∏–π —É—Ä–æ–Ω*: {data_dict['total_damage_done']}\n"
                    f"*–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏*: {data_dict['money_earned']}\n"
                    f"*–ü–æ–±–µ–¥—ã –≤ –ø–∏—Å—Ç–æ–ª–µ—Ç–Ω—ã—Ö —Ä–∞—É–Ω–¥–∞—Ö*: {data_dict['total_wins_pistolround']}\n"
                    f"*MVP*: {data_dict['total_mvps']}\n"
                    f"*–í—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏*: {data_dict['total_matches_won']}\n"
                    f"*–°—ã–≥—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏*: {data_dict['total_matches_played']}\n"
                )
                if data:
                    await message.answer(stats_message, parse_mode='MarkdownV2')
                else:
                    await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ :(")
            else:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –°—Ç–∞—Ç—É—Å: {response.status}")


async def get_games_user(message, steam_id):
    url = 'https://www.munsteam.ru/achievements/api/achievements/gamesuser/'
    params = {'format': 'json', 'user_steam_id': steam_id}
    async with aiohttp.ClientSession() as session:
        async with session.get(url, params=params) as response:
            if response.status == 200:
                data = await response.json()
                data_dict = {v: k for k, v in data[0]['games'].items()}
                if data:
                    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!', reply_markup=games_keyboard(data_dict))
                else:
                    await message.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ :(")
            else:
                await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –°—Ç–∞—Ç—É—Å: {response.status}")